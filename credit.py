# -*- coding: utf-8 -*-
"""Credit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jphLWtfTEuIvm9cHZbxvk_c4aYXEUqWx

https://drive.google.com/file/d/1k-kKZScv3oIvcEF3Tk2r6F9wD1voQYfZ/view?usp=sharing - датасет в облаке

https://www.kaggle.com/datasets/thedevastator/bank-term-deposit-predictions - данные с Kaggle

**Данные представлены выше.**

Бизнес постановка задачи: какие лица будут брать срочный депозит, а какие нет.

ML-задача: анализируя различные характеристики клиентов банка, а именно - возраст, работа, семейное положение и так далее, построим модель что будет предсказывать какие люди будут брать депозит - строка y. Думаю, что это задача регрессии.

Нашими метриками будут: MSE, RMSE
Будем использовать именно эти метрики, так как они показывают точность предсказания модели и велечину отклонение от реальных значений.
"""

! gdown --id 1k-kKZScv3oIvcEF3Tk2r6F9wD1voQYfZ #архив в гугле

! unzip /content/archive.zip #распаковка архива

import pandas as pd
import numpy as np
import seaborn as sns


from matplotlib import pyplot as plt
from matplotlib.cbook import boxplot_stats


from sklearn.preprocessing import LabelEncoder, MinMaxScaler

#будем игнорировать предупреждения
import warnings
warnings.simplefilter('ignore')

df = pd.read_csv("/content/train.csv")
df.info()

df.dtypes

df.isna().sum()

"""Мне не нравится, что получение или не пполучение депозита - y, сделаем другое имя столбца и сделаем этот признак категориальным. Sklearn - переведёт данные default, loan, housing - в категории

headers = ['age',	'job',	'marital',
           'education',	'default',	'balance',
           'housing',	'loan',	'contact'	'day',
           'month',	'duration',	'campaign',	'pdays',	'previous',
           'poutcome',	'y']
"""

headers = [	'default', 'housing',	'loan',	'y']

for i in headers:
  df[i] = [1 if i == 'yes' else 0 for i in df[i]]

df['marital'] = [1 if i == 'married' else 0 for i in df['marital']]

df

df_test = pd.read_csv("/content/test.csv")
df_test.info()

sns.distplot(df['age'], kde=True)

"""Большая часть клиентов банка в возрасте от 25  до 40 лет

11 разных профессий и люди неуказавшие професию

*интересно можно ли легенду переместь, чтобы она не закрывала диаграмму*
"""

df.groupby(['job']).sum().plot(kind='pie', y='loan', autopct='%1.0f%%',
 title='Loan by job')

df['education'].unique()

"""Многие клиенты имеют полное среднее образование, что видно на круговой диаграмме"""

df.groupby(['education']).sum().plot(kind='pie', y='loan', autopct='%1.0f%%',
 title='Loan by education')

# посмотрим завимости данных на диаграммах рассения
fig, axes = plt.subplots(nrows=3, ncols=5, figsize=(25, 20))
for idx, feature in enumerate(df.columns):
  df.plot(feature, 'balance', subplots=True, kind='scatter')

df['y'].value_counts()

"""Посмотрим соотношение взявших и невзявших депозит. 0 - нет, 1 - да"""

sns.countplot(x='y', data=df, palette='hls')

"""Людей, что не брали депозит намного больше, чем других

Сгрупируем признаки по "y", чтобы посмотреть моды значений для клиентов с депозитом и без

Средний возраст взявших депозит не сильно отличается от тех, кто не брал, однако те, кто взяли депозит имеют больше денег на счету и дольше не обращались в банк(pdays), однако время обращения большое(duration), но меньше обращались в банк(campaign)
"""

df.groupby('y').mean()

"""Странно, получается соглано этим данным одинокие люди чаще берут депозит, но почему-то думается, что должно быть иначе"""

df.groupby('marital').mean()

"""Люди имеющие высшее образование и с неизвестным уровнем образования чаще берут депозиты?"""

df.groupby('education').mean()

"""Разных профессий слишком много, не слишком информативная таблица получилась ниже. Хотя интерсено, что retired и students видимо больше в данных или они и правда чаще берут депозит."""

df.groupby('job').mean()

"""Из графика можно сделать вывод, чем сложнее работа, тем меньше больше людей из этой категории не берут депозит. (admin, blue-colar, managment, technician)"""

pd.crosstab(df['job'], df['y']).plot(kind='bar')
plt.title('Freguancy geting loan for job')
plt.xlabel('job'), plt.ylabel('Freguancy geting loan')

"""Видно, что частота взятия депозита зависит от должности, но не совсем ясно как."""

table = pd.crosstab(df['education'], df['y'])
table

"""Видно, что от уровня образования зависит наличие депозита. И что люди secondary - наш 10-11 класс берут депозит чаще других. Скорее всего на обучение в ВУЗ или для открытия своего дела. Однако люди с высшим тоже берут много депозитов.

Значения категориальных столбцов нужно сделать более удобными
"""

cat_vars = ['job','marital','education','default','housing','loan','contact','month','poutcome']
for var in cat_vars:
  cat_list ='var' + '_' + var
  cat_list = pd.get_dummies(df[var], prefix=var)
  data=df.join(cat_list)
  df=data

cat_vars = ['job','marital','education','default','housing','loan','contact','month','poutcome']
data_vars = df.columns.values.tolist()
to_keep = [i for i in data_vars if i not in cat_vars]

data_fin = df[to_keep]
data_fin.columns.values

"""#перевёдем значение столбцов в диапазон от 0 до 1

неудачный выбор перевода котегорий, поэтому выше прописала через генератор


```
#
numerical_columns = df.select_dtypes
(include=['int64', 'float64']).columns
scaler = MinMaxScaler()

df[numerical_columns] = scaler.fit_transform(df[numerical_columns])
print(df.head())Выбран кодовый формат
```

Что-то в этом графике ничего непонятно
"""

df.boxplot(column=['age', 'balance'], grid=False, color='blue')

df.info()
df_test.info()

"""Нужно посмотреть насколько данные связаны между собой.
Согласно ьепловой карте есть значения, что кореллируют между собой
"""

sns.heatmap(df.corr(), cmap="RdYlBu_r")

"""Наверное надо было убрать столбцы без разбиения, что были в изначальном датасете, так как они несут одинаковую информацию с новыми."""

from sklearn.model_selection import train_test_split
from sklearn.dummy import DummyClassifier
from sklearn.linear_model import LogisticRegression

df['education'].unique()

"""Построим baseline модель и модель логистической регрессии
Было бы интерсно посмотрить зависисмость наличия депозита либо от возраста, либо от уровня образования
"""

x = df["age"]
x = x.values.reshape(-1, 1)
y = df['loan']   #наверное тут нужно брать данные из другой колонки

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=2023, test_size=0.25)
print(x)

dummy_clf = DummyClassifier(strategy="most_frequent")
dummy_clf.fit(X_train, y_train);

log_reg = LogisticrRegression()
log_reg.fit(X_train, y_train);